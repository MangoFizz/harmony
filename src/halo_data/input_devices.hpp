// SPDX-License-Identifier: GPL-3.0-only

#ifndef HARMONY_HALO_DATA_INPUT_DEVICES_HPP
#define HARMONY_HALO_DATA_INPUT_DEVICES_HPP

#include <cstdint>
#include <dinput.h>
#include "../memory/struct.hpp"

namespace Harmony::HaloData {
    struct InputGlobals {
        // seems to be some sort of timestamp
        struct UnknownStructure {
            std::int32_t milliseconds;
            std::int16_t unknown;
        };
        static_assert(sizeof(UnknownStructure) == 0x08);

        /**
         * Stores a keypress as seen from WM_CHAR, WM_SYSCHAR, WM_KEYDOWN, or WM_SYSKEYDOWN.
         */
        struct BufferedKey {
            enum Modifier {
                MODIFIER_SHIFT = 1,
                MODIFIER_CTRL = 2,
                MODIFIER_ALT = 4
            };

            /** ALT/CONTROL/SHIFT (LSB) */
            std::int8_t modifiers;

            /**
             * The lower byte of wParam
             * If the event was generated by WM_KEYDOWN or WM_SYSKEYDOWN: -1
             */
            std::int8_t character;

            /** internally translated, need work on this */
            std::int16_t keycode;
        };
        static_assert(sizeof(BufferedKey) == 0x04 && alignof(BufferedKey) == 0x02);

        /**
         * A buffer translated from the mouse device state.
         */
        struct MouseState {
            /** Horizontal mouse movement. */
            std::int32_t horizontal;

            /** Vertical mouse movement. */
            std::int32_t vertical;

            /** Comes divided by granularity, if granularity is non-zero. */
            std::int32_t wheel;

            /**
             * Indicates how long a mouse button has been held for.
             *
             * For every update for which the button is held, its value is incremented by 1, up to 255.
             * If the button is not down, then the value is set to 0.
             *
             * Device state query rate is (generally) tied to framerate.
             * For high framerates, these button values reach the maximum quickly.
             */
            std::uint8_t button_state[8];

            /**
             * Indicates that a mouse button has been released.
             * A button vaue is true if and only if the button transitioned from a pressed to released state.
             * Effectively, this indicates the corresponding button state value has gone from non-zero to 0.
             */
            bool button_changed[8];
        }; static_assert(sizeof(MouseState) == 0x1C);

        /** Indicates that the #enumerated_devices are acquired. */
        bool devices_acquired; 

        /**
         * A switch that forces Halo to use various virtual input state buffers.
         *
         * This is never set true by Halo, but all the mechanisms that change input
         * behavior are still implemented. 
         * For instance, if this value is true, then enumerated_devices.direct_mouse_state
         * is ignored and mouse input is pulled from enumerated_devices.virtual_mouse_state.
         *
         * This value is set to false by default and when the input devices are unacquired.
         */
        bool use_virtual_input;

        /** The DirectInput interface. */
        LPDIRECTINPUT8 direct_input;

        /** Possibly last time of device update for each local player */
        UnknownStructure unknown0[4];
        
        PADDING(0x6D);
        PADDING(0x6D);

        /** 
          * Halo uses this for virtual keyboards and not for controls.
          * This structure gets used in the custom chat of Chimera.
          */
        struct {
            /** The index within keys to start reading input from. */
            std::int16_t read_index; 

            /** The number of inputs stored in keys. This does not change as the read index is incremented. */
            std::int16_t count;

            /** Stored key presses. */
            BufferedKey  keys[0x40];

        } buffered_keys;

        struct {
            /**
             * An interface for the system keyboard device.
             *
             * The data format for this interface is c_dfDIKeyboard.
             */
            LPDIRECTINPUTDEVICE direct_keyboard;

            /** 
             * An interface for the system mouse device.
             *
             * The data format for this interface is c_dfDIMouse2, for which
             * DIMOUSESTATE2 is appropriate for querying this device's buffered state.
             */
            LPDIRECTINPUTDEVICE direct_mouse;

            /** Granularity for the z-axis (mouse wheel). */
            std::uint32_t       direct_mouse_z_granularity;

            /** The mouse state as *translated* from direct_mouse->GetDeviceState(). */
            MouseState direct_mouse_state;

            /** 
             * Never written to by Halo, see #use_virtual_input. 
             * Presumably this used to be part of some harness for providing programmed control over the game.
             */
            MouseState virtual_mouse_state;

            /** The index of the next unoccupied joystick slot in #direct_joysticks. */
            std::int16_t        next_joystick;

            /** Interfaces for the registered gamepad/joystick devices. */
            LPDIRECTINPUTDEVICE direct_joysticks[8]; 

            /** Joystick state */
            std::uint8_t        direct_joysticks_states[0x240][8];
        } enumerated_devices;
        
        /** 
         * Get the input device and state globals
         * @return reference to the input globals
         */
        static InputGlobals &get();
    };
    static_assert(sizeof(InputGlobals) == 0x1470);
}

#endif
