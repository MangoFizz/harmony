// SPDX-License-Identifier: GPL-3.0-only

#include <cstdint>
#include "../signature.hpp"
#include "client.hpp"

namespace Harmony {
    std::vector<Signature> find_client_signatures() {
        std::vector<Signature> signatures;

        #define FIND_SIGNATURE(name, offset, ...) { \
            const std::int16_t data[] = __VA_ARGS__; \
            signatures.emplace_back(name, data, sizeof(data) / sizeof(data[0]), offset); \
        }
        
        /** Core */
        FIND_SIGNATURE("on_tick", 0x0, {-1 /*0xE8*/, -1, -1, -1, -1, 0xA1, -1, -1, -1, -1, 0x8B, 0x50, 0x14, 0x8B, 0x48, 0x0C});
        FIND_SIGNATURE("on_map_load", 0x0, {0xE8, -1, -1, -1, -1, 0xE8, -1, -1, -1, -1, 0xA1, -1, -1, -1, -1, 0x33, 0xD2, 0x8B, 0xC8, 0x89, 0x11});
        FIND_SIGNATURE("console_call", 0x0, { -1, -1, -1, -1, -1, 0x83, 0xC4, 0x04, 0x88, 0x1D, -1, -1, -1, -1, 0x66, 0x89, 0x1D });
        FIND_SIGNATURE("console_out", 0x0, { 0x83, 0xEC, 0x10, 0x57, 0x8B, 0xF8, 0xA0, -1, -1, -1, -1, 0x84, 0xC0, 0xC7, 0x44, 0x24, 0x04, 0x00, 0x00, 0x80, 0x3F });
        FIND_SIGNATURE("get_tag_id", 0x0, {0xA0, -1, -1, -1, -1, 0x53, 0x83, 0xCB, 0xFF, 0x84, 0xC0, 0x55, 0x8B, 0x6C, 0x24, 0x0C, 0x74, 0x5B, 0xA1, -1, -1, -1, -1, 0x8B, 0x48, 0x0C});
        FIND_SIGNATURE("keypress_event", 0x0, {0x89, 0x0C, 0x85, -1, -1, -1, -1, 0x66, 0xFF, 0x05, -1, -1, -1, -1, 0x59, 0xC3});
        FIND_SIGNATURE("console_unknown_command_message_print_call", 0, {0xE8, -1, -1, -1, -1, 0x83, 0xC4, 0x0C, 0x5E, 0x8A, 0xC3, 0x5B, 0x81, 0xC4, 0x00, 0x05, 0x00, 0x00});
        FIND_SIGNATURE("console_command_history_address", 0x1, {0x05, -1, -1, -1, -1, 0x8D, 0x64, 0x24, 0x00, 0x8A, 0x0A, 0x42, 0x88, 0x08, 0x40, 0x3A, 0xCB});
        FIND_SIGNATURE("console_command_history_count_address", 0x3, {0x0F, 0xBF, 0x05, -1, -1, -1, -1, 0x40, 0x25, 0x07, 0x00, 0x00, 0x80, 0x79, 0x05, 0x48, 0x83, 0xC8, 0xF8});
        FIND_SIGNATURE("console_command_function", 0x0, {0x8A, 0x07, 0x81, 0xEC, 0x00, 0x05, 0x00, 0x00, 0x3C, 0x3B, 0x74, 0x0E, 0x3C, 0x23, 0x74, 0x0A});

        /** Engine data */
        FIND_SIGNATURE("halo_path", 0x1, {0xBF, -1, -1, -1, -1, 0xF3, 0xAB, 0xAA, 0xE8});
        FIND_SIGNATURE("resolution", 0x4, {0x75, 0x0A, 0x66, 0xA1, -1, -1, -1, -1, 0x66, 0x89, 0x42, 0x04, 0x83, 0xC4, 0x10, 0xC3});
        FIND_SIGNATURE("master_volume", 0x1, {0xBE, -1, -1, -1, -1, 0x8D, 0x7C, 0x24, 0x10, 0xF3, 0xA5, 0x8B, 0x42, 0x34});
        FIND_SIGNATURE("game_engine", 0x4, {0x8D, 0x75, 0xD0, 0xB8, -1, -1, -1, -1, 0xE8, -1, -1, -1, -1, 0x83});
        FIND_SIGNATURE("play_sound", 0x0, {0x83, 0xEC, 0x08, 0x8B, 0x0D, -1, -1, -1, -1, 0x53, 0x55, 0x8B, 0x6C, 0x24, 0x14, 0x8B, 0xC5, 0x25, 0xFF, 0xFF, 0x00, 0x00, 0xC1, 0xE0, 0x05});
        FIND_SIGNATURE("input_globals", 0x4, {0x85, 0xC0, 0xC6, 0x05, -1, -1, -1, -1, 0x01, 0x74, -1, 0x8B, 0x08, 0x50});
        FIND_SIGNATURE("window_globals", 0x4, {0x8B, 0x45, 0x08, 0xA3, -1, -1, -1, -1, 0x8B, 0x4D, 0x14});
        
        /** Multiplayer */
        FIND_SIGNATURE("on_multiplayer_sound", 0x0, {0xC6, 0x44, 0x24, 0x04, 0x00, 0x8A, 0x86});
        FIND_SIGNATURE("on_multiplayer_event", 0x2, {0x52, 0x50, 0xE8, -1, -1, -1, -1, 0x83, 0xC4, 0x10, 0x5F});
        FIND_SIGNATURE("announcer_hud_messages_function", 0x0, {0x8B, 0x84, 0x24, 0xA0, 0x00, 0x00, 0x00, 0xFF, 0x24, 0x85});
        FIND_SIGNATURE("announcer_hud_messages_function_return", 0x0, {0xC6, 0x44, 0x24, 0x0F, 0x00, 0x8B, 0x94, 0x24, 0xA8, 0x00, 0x00, 0x00});

        /** Widescreen override */
        FIND_SIGNATURE("widescreen_element_position_menu", 0x0, {/**0xE8*/ -1, -1, -1, -1, -1, 0x83, 0xC4, 0x04, 0x5F, 0x5D, 0x5B, 0x5E, 0x81, 0xC4, 0x30, 0x01, 0x00, 0x00, 0xC3});
        FIND_SIGNATURE("widescreen_text_tab", 0x3, {0x66, 0xC7, 0x05, -1, -1, -1, -1, 0x06, 0x00, 0x89, 0x15, -1, -1, -1, -1, 0xA3, -1, -1, -1, -1, 0x89, 0x0D});
        FIND_SIGNATURE("widescreen_menu_text", 0x9, {0x52, 0x6A, 0x00, 0x6A, 0x00, 0x8D, 0x44, 0x24, -1, 0xE8, -1, -1, -1, -1, 0x83, 0xC4, 0x0C});
        FIND_SIGNATURE("widescreen_menu_text_2", 0x0, {0xE8, -1, -1, -1, -1, 0x8B, 0x44, 0x24, 0x2C, 0x83, 0xC4, 0x18, 0x83, 0xBD, 0xF8, 0x00, 0x00, 0x00, 0xFF});
        FIND_SIGNATURE("widescreen_input_text", 0x0, {0xE8, -1, -1, -1, -1, 0xA0, -1, -1, -1, -1, 0x83, 0xC4, 0x0C, 0x84, 0xC0, 0x0F, 0x85, -1, -1, -1, -1, 0x83, 0x3D, -1, -1, -1, -1, 0xFF, 0x0F, 0x84, -1, -1, -1, -1});
        FIND_SIGNATURE("widescreen_mouse", 0x0, {0x7D, 0x08, 0x89, 0x15, -1, -1, -1, -1, 0xEB, 0x16, 0x3D, 0x80, 0x02, 0x00, 0x00});

        /** DirectX */
        FIND_SIGNATURE("d3d9_end_scene_call", 0x0, {0xFF, 0x92, 0xA8, 0x00, 0x00, 0x00, 0x85, 0xC0, 0x7C, 0x0C});
        FIND_SIGNATURE("d3d9_reset_call", 0x0, {0xFF, 0x52, 0x40, 0x85, 0xC0, 0x0F, 0x8C});
        FIND_SIGNATURE("d3d9_present_parameters", 0x6, { 0xB9, 0x0E, 0x00, 0x00, 0x00, 0xBF, -1, -1, -1, -1, 0xF3, 0xA5});

        /** Menu widget stuff */
        FIND_SIGNATURE("widget_globals", 0x8, {0x33, 0xC0, 0xB9, 0x0D, 0x00, 0x00, 0x00, 0xBF, -1, -1, -1, -1, 0xF3, 0xAB, 0x39, 0x1D});
        FIND_SIGNATURE("widget_event_globals", 0x8, {0x33, 0xC0, 0xB9, 0x43, 0x00, 0x00, 0x00, 0xBF, -1, -1, -1, -1, 0xF3, 0xAB, 0x8D, 0x44, 0x24, 0x04});
        FIND_SIGNATURE("widget_cursor_globals", 0x4, {0x8B, 0xC6, 0xC6, 0x05, -1, -1, -1, -1, 0x01, 0xE8, -1, -1, -1, -1, 0x83, 0xC4, 0x04, 0xC6, 0x05, -1, -1, -1, -1, 0x00});
        FIND_SIGNATURE("widget_input_handle_function", 0x0, {0xE8, -1, -1, -1, -1, 0x38, 0x1D, -1, -1, -1, -1, 0x0F, 0x84, -1, -1, -1, -1, 0x38, 0x1D, -1, -1, -1, -1, 0x0F, 0x85, -1, -1, -1, -1});
        FIND_SIGNATURE("widget_create_function", 0x0, {0x83, 0xEC, 0x0C, 0x53, 0x8B, 0x5C, 0x24, 0x20, 0x55, 0x33, 0xC0, 0x33, 0xED, 0x66, 0x83, 0xFB, 0xFF});
        FIND_SIGNATURE("widget_create_function_return", 0x0E, {0x8B, 0xCD, 0xE8, -1, -1, -1, -1, 0x83, 0xC4, 0x08, 0x5F, 0x5E, 0x8B, 0xC5, 0x5D, 0x5B, 0x83, 0xC4, 0x0C, 0xC3});
        FIND_SIGNATURE("widget_open_function", 0x0, {0x8B, 0x0D, -1, -1, -1, -1, 0x8B, 0x54, 0x24, 0x04, 0x53, 0x55, 0x8B, 0x6C, 0x24, 0x10, 0x8B, 0xC5, 0x25, 0xFF, 0xFF, 0x00, 0x00});
        FIND_SIGNATURE("widget_close_function", 0x0, {0x83, 0xEC, 0x10, 0x53, 0x8B, 0xD8, 0x33, 0xC0, 0x66, 0x8B, 0x43, 0x08, 0x33, 0xC9, 0x66, 0x3D, 0xFF, 0xFF});
        FIND_SIGNATURE("widget_find_function", 0x0, {0x8B, 0x4C, 0x24, 0x04, 0x8B, 0x11, 0x57, 0x8B, 0x7C, 0x24, 0x0C, 0x33, 0xC0, 0x3B, 0xD7, 0x75, 0x04});
        FIND_SIGNATURE("widget_focus_function", 0x0, {0x55, 0x56, 0x8B, 0xF1, 0x8B, 0x48, 0x30, 0x85, 0xC9, 0x74, 0x0E, 0xEB, 0x03, 0x8D, 0x49, 0x00});
        FIND_SIGNATURE("widget_list_item_index_function", 0x0, {0x8B, 0x4E, 0x30, 0x83, 0xC8, 0xFF, 0x85, 0xC9, 0x74, 0x18, 0x8B, 0x49, 0x34, 0x33, 0xD2});
        FIND_SIGNATURE("widget_accept_event_check", 0x0, {0x0F, 0xB6, 0x47, 0x04, 0x66, 0x39, 0x46, 0x04, 0x75, 0x63, 0x80, 0x7F, 0x05, 0x01, 0xEB, 0x3D});
        FIND_SIGNATURE("widget_mouse_pressed_button_check", 0, {0xFF, 0x24, 0x85, -1, -1, -1, -1, 0x8A, 0x47, 0x04, 0x84, 0xC0, 0xEB, 0x10, 0x80, 0x7F, 0x04, 0x01, 0xEB, 0x0A, 0x80, 0x7F, 0x04, 0x02});
        FIND_SIGNATURE("widget_tab_list_items_next_vertical_call", 0x0, {0xE8, -1, -1, -1, -1, 0x83, 0xC4, 0x0C, 0x85, 0xF6, 0x75, 0x09, 0xBE, 0x01, 0x00, 0x00, 0x00, 0x89, 0x74, 0x24, 0x14});
        FIND_SIGNATURE("widget_tab_list_items_next_horizontal_call", 0x0, {0xE8, -1, -1, -1, -1, 0xE9, -1, -1, -1, -1, 0x8D, 0x4C, 0x24, 0x11, 0x51, 0x57, 0x53, 0xE8, -1, -1, -1, -1, 0xE9, -1, -1, -1, -1, 0x66, 0x3D, 0x01, 0x00});
        FIND_SIGNATURE("widget_tab_list_items_previous_vertical_call", 0x0, {0xE8, -1, -1, -1, -1, 0xE9, -1, -1, -1, -1, 0x66, 0x3D, 0x01, 0x00, 0x75, 0x83, 0x0F, 0xBF, 0x47, 0x06, 0x3D, 0x00, 0x80, 0xFF, 0xFF});
        FIND_SIGNATURE("widget_tab_list_items_previous_horizontal_call", 0x0, {0xE8, -1, -1, -1, -1, 0x83, 0xC4, 0x0C, 0x85, 0xF6, 0x75, 0x08, 0xC7, 0x44, 0x24, 0x14, 0x01, 0x00, 0x00, 0x00, 0xC6, 0x44, 0x24, 0x12, 0x01});
        FIND_SIGNATURE("widget_tab_children_next_vertical_call", 0x0, {0xE8, -1, -1, -1, -1, 0xEB, 0x78, 0x66, 0x3D, 0x01, 0x00, 0x75, 0x12, 0x0F, 0xBF, 0x47, 0x06, 0x3D, 0x00, 0x80, 0xFF, 0xFF});
        FIND_SIGNATURE("widget_tab_children_next_horizontal_call", 0x0, {0xE8, -1, -1, -1, -1, 0xEB, 0x28, 0x66, 0x3D, 0x01, 0x00, 0x75, 0x34, 0x0F, 0xBF, 0x47, 0x04, 0x3D, 0x00, 0x80, 0xFF, 0xFF, 0x74, 0x10});
        FIND_SIGNATURE("widget_tab_children_previous_call", 0x0, {0xE8, -1, -1, -1, -1, 0x85, 0xF6, 0x75, 0x09, 0xBE, 0x01, 0x00, 0x00, 0x00, 0x89, 0x74, 0x24, 0x14, 0xC6, 0x44, 0x24, 0x12, 0x01});
        FIND_SIGNATURE("widget_sound_play_function", 0x0, {0x0F, 0xBF, 0xC0, 0x48, 0x83, 0xF8, 0x03, 0x77, 0x69, 0x57, 0xFF, 0x24, 0x85, -1, -1, -1, -1, 0x68, -1, -1, -1, -1, 0xBF, 0x21, 0x64, 0x6E, 0x73});
        FIND_SIGNATURE("widget_mouse_focus_update", 0x0, {0x8B, 0x56, 0x30, 0x89, 0x72, 0x38, 0x8B, 0x76, 0x30, 0x8B, 0x46, 0x30, 0x85, 0xC0, 0x74, 0x3C});
        FIND_SIGNATURE("widget_memory_release_function", 0x0, {0x51, 0x57, 0x8B, 0x7C, 0x24, 0x0C, 0x8A, 0x47, 0x14, 0x84, 0xC0, 0x0F, 0x85, -1, -1, -1, -1, 0x66, 0x8B, 0x47, 0x08};)
        FIND_SIGNATURE("widget_memory_pool_address", 0x2, {0x8B, 0x0D, -1, -1, -1, -1, 0x83, 0xC0, 0xF0, 0x81, 0xE6, 0xFF, 0xFF, 0xFF, 0x7F, 0xE8, -1, -1, -1, -1, 0x8B, 0x51, 0x14});
        FIND_SIGNATURE("widget_input_handler_call", 0x0, {0xE8, -1, -1, -1, -1, 0x38, 0x1D, -1, -1, -1, -1, 0x0F, 0x84, -1, -1, -1, -1, 0x38, 0x1D, -1, -1, -1, -1});

        /** Halo scripts */
        FIND_SIGNATURE("hs_funtions_table", 0x8, {0x75, -1, 0x0F, 0xBF, 0xC8, 0x8B, 0x14, 0x8D, -1, -1, -1, -1, 0x8B, 0x4C, 0x24, 0x14});
        FIND_SIGNATURE("hs_function_call", 0x3, {0x51, 0x57, 0x50, 0xFF, 0x52, 0x0C, 0x83, 0xC4, 0x0C, 0xEB, 0x53});
        FIND_SIGNATURE("hs_get_function_parameters_function", 0x0, {0x8B, 0x4C, 0x24, 0x04, 0x53, 0x81, 0xE1, 0xFF, 0xFF, 0x00, 0x00, 0x69, 0xC9, 0x18, 0x02, 0x00, 0x00, 0x55});
        FIND_SIGNATURE("hs_pop_script_function", 0x0, {0x81, 0xE1, 0xFF, 0xFF, 0x00, 0x00, 0x56, 0x8B, 0xF1, 0x8B, 0x0D, -1, -1, -1, -1, 0x69, 0xF6, 0x18, 0x02, 0x00, 0x00, 0x57});

        return signatures;
    }
}
